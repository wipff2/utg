local ArrayField = loadstring(game:HttpGet("https://raw.githubusercontent.com/Hosvile/Refinement/main/MC%3AArrayfield%20Library"))()
-- soucrch get by rof_r
local Window = ArrayField:CreateWindow({
    Name = "Rinns Hub",
    LoadingTitle = "Rinns Hub",
    LoadingSubtitle = "Code by Rinn and Kylo Ui by Sirius Ui remake by Hosvile",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "RinnsHubConfigs",
        FileName = "RinnsHub"
    },
    Discord = {
        Enabled = false,
        Invite = "Mt9F5nc8Tg",
        RememberJoins = false
    },
    KeySystem = false,
    KeySettings = {
        Title = "ArrayField",
        Subtitle = "Key System",
        Note = "Join the discord (discord.gg/sirius)",
        FileName = "ArrayFieldsKeys",
        SaveKey = false,
        GrabKeyFromSite = false,
        Key = {"Hello",'Bye'},
        Actions = {
            [1] = {
                Text = 'Click here to copy the key link',
                OnPress = function()
                end,
            }
        },
    }
})

local Tab = Window:CreateTab("Main Tab", 4483362458) -- Title, Image


Tab:CreateButton({
    Name = "Copy Discord Link",
    Info = {
        Title = 'Copy Discord Link',
        Description = 'Copys our discord server link to your clipboard',
    },
    Interact = 'Changable',
    Callback = function()
        setclipboard('https://discord.gg/VudXCDCaBN') 
        print('Www')              
    end,
})

local tagAura = false
local ignoreDead = false
local teamCheck = false
local hitboxExpander = false
local hitboxSize = 5
local tagAuraMode = "Closest"
local tagAuraRange = 15

local Section = Tab:CreateSection("Main",false)

Tab:CreateToggle({
    Name = "Tag Aura",
    Info = {
        Title = "Tag Aura",
        Image = "rbxassetid://12735851647",
        Description = "Auto Tags People For you best tag aura frr",
    },
    CurrentValue = false,
    Flag = "TagAura",
    Callback = function(Value)
        tagAura = Value
    end
})

Tab:CreateDropdown({
    Name = "Tag Aura Mode",
    Options = {"Closest", "Multi Target"},
    CurrentOption = "Closest",
    MultiSelection = false,
    Flag = "TagAuraMode",
    Callback = function(Option)
        tagAuraMode = Option
    end
})

Tab:CreateSlider({
    Name = "Tag Aura Range",
    Range = {0, 20},
    Increment = 1,
    CurrentValue = 15,
    Flag = "TagAuraRange",
    Callback = function(Value)
        tagAuraRange = Value
    end,
})

Tab:CreateToggle({
    Name = "Tag Aura Ignore Dead",
    Info = {
        Title = "Ignore Dead",
        Image = "rbxassetid://12735851647",
        Description = "Makes the tag aura ignore dead people",
    },
    CurrentValue = false,
    Flag = "IgnoreDead",
    Callback = function(Value)
        ignoreDead = Value
    end
})

Tab:CreateToggle({
    Name = "Tag Aura Team Check",
    Info = {
        Title = "Team Check",
        Image = "rbxassetid://12735851647",
        Description = "Makes The Tag Aura Check if the player its trying to tag is on your team dont use in Ffa",
    },
    CurrentValue = false,
    Flag = "TeamCheck",
    Callback = function(Value)
        teamCheck = Value
    end
})

Tab:CreateToggle({
    Name = "Hitbox Expander",
    Info = {
        Title = "Hitbox Expander",
        Image = "rbxassetid://12735851647",
        Description = "Changes The Hitboxes of other players 3 stars?",
    },
    CurrentValue = false,
    Flag = "HitboxExpander",
    Callback = function(Value)
        hitboxExpander = Value
    end
})

Tab:CreateSlider({
    Name = "Hitbox Size",
    Range = {0, 20},
    Increment = 1,
    CurrentValue = 5,
    Flag = "HitboxSize",
    Callback = function(Value)
        hitboxSize = Value
    end,
})

local players = game:GetService("Players")
local replicatedStorage = game:GetService("ReplicatedStorage")
local tagPlayerEvent = replicatedStorage.Events.game.tags.TagPlayer

local function isPlayerValid(player)
    if not player.Character then return false end
    if ignoreDead and player:FindFirstChild("PlayerRole") and player.PlayerRole.Value == "Dead" then
        return false
    end
    if teamCheck and player:FindFirstChild("PlayerRole") and player.PlayerRole.Value == players.LocalPlayer.PlayerRole.Value then
        return false
    end
    return true
end

local function applyHitbox(player, size)
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local humanoidRootPart = player.Character.HumanoidRootPart
        humanoidRootPart.Size = Vector3.new(size, size, size)
        humanoidRootPart.Transparency = 0.5
        humanoidRootPart.CanCollide = false
    end
end

local function resetHitbox(player)
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local humanoidRootPart = player.Character.HumanoidRootPart
        humanoidRootPart.Size = Vector3.new(2, 2, 1)
        humanoidRootPart.Transparency = 1
        humanoidRootPart.CanCollide = true
    end
end

spawn(function()
    while true do
        if tagAura then
            if tagAuraMode == "Closest" then
                local nearestPlayer, shortestDistance = nil, math.huge
                for _, player in pairs(players:GetPlayers()) do
                    if player ~= players.LocalPlayer and isPlayerValid(player) and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        local distance = (player.Character.HumanoidRootPart.Position - players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                        if distance < shortestDistance and distance <= tagAuraRange then
                            nearestPlayer, shortestDistance = player, distance
                        end
                    end
                end
                if nearestPlayer and nearestPlayer.Character and nearestPlayer.Character:FindFirstChild("HumanoidRootPart") and nearestPlayer.Character:FindFirstChild("Humanoid") then
                    tagPlayerEvent:InvokeServer(nearestPlayer.Character.Humanoid, nearestPlayer.Character.HumanoidRootPart.Position)
                end
            elseif tagAuraMode == "Multi Target" then
                for _, player in pairs(players:GetPlayers()) do
                    if player ~= players.LocalPlayer and isPlayerValid(player) and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character:FindFirstChild("Humanoid") then
                        local distance = (player.Character.HumanoidRootPart.Position - players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                        if distance <= tagAuraRange then
                            tagPlayerEvent:InvokeServer(player.Character.Humanoid, player.Character.HumanoidRootPart.Position)
                        end
                    end
                end
            end
        end

        if hitboxExpander then
            for _, player in pairs(players:GetPlayers()) do
                if player ~= players.LocalPlayer and isPlayerValid(player) then
                    applyHitbox(player, hitboxSize)
                else
                    resetHitbox(player)
                end
            end
        else
            for _, player in pairs(players:GetPlayers()) do
                resetHitbox(player)
            end
        end

        task.wait()
    end
end)

local tweenService = game:GetService("TweenService")
local running = false

local function getNearestCoin()
    local nearestCoin = nil
    local shortestDistance = math.huge
    local playerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position

    for _, coin in ipairs(workspace.coins:GetChildren()) do
        if coin:IsA("Model") and coin:FindFirstChild("Coin") then
            local coinPosition = coin.Coin.Position
            local distance = (playerPosition - coinPosition).Magnitude

            if distance < shortestDistance then
                shortestDistance = distance
                nearestCoin = coin
            end
        end
    end

    return nearestCoin, shortestDistance
end

local function moveToCoin()
    while running do
        local nearestCoin, distance = getNearestCoin()

        if nearestCoin then
            local tweenInfo = TweenInfo.new(distance / 50, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)
            local goal = {CFrame = nearestCoin.Coin.CFrame}

            local tween = tweenService:Create(game.Players.LocalPlayer.Character.HumanoidRootPart, tweenInfo, goal)
            tween:Play()
            tween.Completed:Wait()
        else
            wait(0.01) 
        end
    end
end

Tab:CreateToggle({
    Name = "Auto Farm Coins",
    Info = {
        Title = 'Auto Farm Coins',
        Image = '12735851647',
        Description = 'Auto Farm Coins For You good with tag aura incase you get tagged',
    },
    CurrentValue = false,
    Flag = "CoinCollectorToggle",
    Callback = function(Value)
        running = Value
        if running then
            moveToCoin()
        end
    end,
})

local Section = Tab:CreateSection("Useless Auto Vote Lol",false)


local currentMapSelection = "Option 1"
local isAutoVoteEnabled = false
local isAutoVoteRunning = false

Tab:CreateDropdown({
    Name = "Map to auto vote",
    Options = {"Option 1", "Option 2", "Option 3"},
    CurrentOption = currentMapSelection,
    MultiSelection = false,
    Flag = "MapDropdown",
    Callback = function(Option)
        currentMapSelection = Option
    end,
})

Tab:CreateToggle({
    Name = "Auto Vote",
    Info = {
        Title = 'Auto Vote',
        Image = '12735851647',
        Description = 'Automatically votes the selected option for the map in the dropdown W explaining',
    },
    CurrentValue = isAutoVoteEnabled,
    Flag = "AutoVoteToggle",
    Callback = function(Value)
        isAutoVoteEnabled = Value
        if isAutoVoteEnabled then
            if not isAutoVoteRunning then
                isAutoVoteRunning = true
                while isAutoVoteRunning and isAutoVoteEnabled do
                    if currentMapSelection == "Option 1" then
                        local args = {[1] = 1}
                        game:GetService("ReplicatedStorage").Events.game.rounds.RoundVote:FireServer(unpack(args))
                    elseif currentMapSelection == "Option 2" then
                        local args = {[1] = 2}
                        game:GetService("ReplicatedStorage").Events.game.rounds.RoundVote:FireServer(unpack(args))
                    elseif currentMapSelection == "Option 3" then
                        local args = {[1] = 3}
                        game:GetService("ReplicatedStorage").Events.game.rounds.RoundVote:FireServer(unpack(args))
                    end
                    wait(1)
                end
            end
        else
            isAutoVoteRunning = false
        end
    end,
})

-- Ensure the loop stops if the toggle is turned off externally (e.g., through saved configuration)
coroutine.wrap(function()
    while true do
        if not isAutoVoteEnabled then
            isAutoVoteRunning = false
        end
        wait(0.5)
    end
end)

local Section = Tab:CreateSection("Self/Player",false)

Tab:CreateToggle({
    Name = "Inf Jump",
    Info = {
        Title = 'Infinite Jump',
        Image = '12735851647',
        Description = 'Allows infinite jumping',
    },
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        if Value then
            _G.InfJump = true
            local Player = game:GetService("Players").LocalPlayer
            local UserInputService = game:GetService("UserInputService")

            UserInputService.JumpRequest:Connect(function()
                if _G.InfJump then
                    Player.Character:FindFirstChildOfClass('Humanoid'):ChangeState("Jumping")
                end
            end)
        else
            _G.InfJump = false
        end
    end,
})

-- Noclip Toggle
Tab:CreateToggle({
    Name = "Noclip",
    Info = {
        Title = 'Noclip',
        Image = '12735851647',
        Description = 'Allows you to no clip to walls dumb ass',
    },
    CurrentValue = false,
    Flag = "Toggle2",
    Callback = function(Value)
        if Value then
            _G.Noclip = true
            local Player = game:GetService("Players").LocalPlayer
            local RunService = game:GetService("RunService")

            _G.NoclipConnection = RunService.Stepped:Connect(function()
                if _G.Noclip and Player.Character then
                    for _, part in pairs(Player.Character:GetDescendants()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = false
                        end
                    end
                end
            end)
        else
            _G.Noclip = false
            if _G.NoclipConnection then
                _G.NoclipConnection:Disconnect()
            end
            if game:GetService("Players").LocalPlayer.Character then
                for _, part in pairs(game:GetService("Players").LocalPlayer.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                    end
                end
            end
        end
    end,
})

local hooks = {
    walkspeed = 16,
    jumppower = 50
}

local originalIndex
local originalNewIndex

originalIndex = hookmetamethod(game, "__index", function(self, property)
    if not checkcaller() and self:IsA("Humanoid") and self:IsDescendantOf(game.Players.LocalPlayer.Character) then
        local lowerProperty = property:lower()
        if hooks[lowerProperty] then
            return hooks[lowerProperty]
        end
    end
    return originalIndex(self, property)
end)

originalNewIndex = hookmetamethod(game, "__newindex", function(self, property, value)
    if not checkcaller() and self:IsA("Humanoid") and self:IsDescendantOf(game.Players.LocalPlayer.Character) then
        local lowerProperty = property:lower()
        if hooks[lowerProperty] then
            hooks[lowerProperty] = value
            return
        end
    end
    return originalNewIndex(self, property, value)
end)

local Player = game:GetService("Players").LocalPlayer
local humanoid = Player.Character:FindFirstChildWhichIsA("Humanoid")

local WalkSpeedEnabled = false
Tab:CreateToggle({
    Name = "Enable WalkSpeed",
    CurrentValue = false,
    Flag = "ToggleWalkSpeed",
    Callback = function(Value)
        WalkSpeedEnabled = Value
        if WalkSpeedEnabled then
            humanoid.WalkSpeed = hooks.walkspeed
        else
            humanoid.WalkSpeed = 32 
        end
    end,
})

Tab:CreateSlider({
    Name = "WalkSpeed",
    Range = {16, 300},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = hooks.walkspeed,
    Flag = "SliderWalkSpeed",
    Callback = function(Value)
        hooks.walkspeed = Value
        if WalkSpeedEnabled then
            humanoid.WalkSpeed = hooks.walkspeed
        end
    end,
})

-- JumpPower Slider
local JumpPowerEnabled = false
Tab:CreateToggle({
    Name = "Enable JumpPower",
    CurrentValue = false,
    Flag = "ToggleJumpPower",
    Callback = function(Value)
        JumpPowerEnabled = Value
        if JumpPowerEnabled then
            humanoid.JumpPower = hooks.jumppower
        else
            humanoid.JumpPower = 20 
        end
    end,
})

Tab:CreateSlider({
    Name = "JumpPower",
    Range = {50, 500},
    Increment = 1,
    Suffix = "Power",
    CurrentValue = hooks.jumppower,
    Flag = "SliderJumpPower",
    Callback = function(Value)
        hooks.jumppower = Value
        if JumpPowerEnabled then
            humanoid.JumpPower = hooks.jumppower
        end
    end,
})

local Section = Tab:CreateSection("Esp Op!!!",false)

local espEnabled = {
    NameESP = false,
}

local espObjects = {}

local function createESPForPlayer(player)
    local character = player.Character or player.CharacterAdded:Wait()
    local head = character:WaitForChild("Head")

    if not espObjects[player] then
        local billboard = Instance.new("BillboardGui")
        billboard.Name = "NameEsp"
        billboard.Adornee = head
        billboard.Size = UDim2.new(0, 200, 0, 50)
        billboard.StudsOffset = Vector3.new(0, 3, 0)
        billboard.AlwaysOnTop = true

        local nameLabel = Instance.new("TextLabel")
        nameLabel.Parent = billboard
        nameLabel.Size = UDim2.new(1, 0, 1, 0)
        nameLabel.Text = player.Name
        nameLabel.Font = Enum.Font.FredokaOne
        nameLabel.TextSize = 14
        nameLabel.BackgroundTransparency = 1
        nameLabel.TextColor3 = Color3.new(1, 1, 1)

        billboard.Parent = game.Players.LocalPlayer.PlayerGui
        espObjects[player] = {nameLabel = nameLabel}
    end
end

local function updateESP()
    for _, player in pairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer then
            if espEnabled.NameESP then
                createESPForPlayer(player)
            end
        end
    end
end

game.Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        createESPForPlayer(player)
    end)
end)

game:GetService("RunService").RenderStepped:Connect(function()
    if espEnabled.NameESP then
        updateESP()
    end
end)

Tab:CreateToggle({
    Name = "Name Esp",
    Info = {
        Title = 'Name Esp',
        Description = 'Self Explanitory I cant spell',
    },
    CurrentValue = false,
    Flag = "ToggleNameESP",
    Callback = function(Value)
        espEnabled.NameESP = Value
        updateESP()
    end,
})
